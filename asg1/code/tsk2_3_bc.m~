function [] = tsk2_3_bc(x_train, y_train, x_test, y_test)
    function [log_posterior] = target_fun(zz, xx, yy)
        ww  = zz(1:end-2); %Dx1
        eps = zz(end-1);
        lmb = zz(end); %log of lambda
        D = numel(ww); %dimensionality of weights
        
        %give zero chances to impossible cases
        if not(0 <= eps && eps <= 1)
            log_posterior = -Inf;
            return;
            
        end
        
        kk = zz(1:end-1);
        nlm_L = nlm_loglike(kk, xx, yy);
        
        log_posterior = nlm_L - lmb*dot(ww,ww) + 0.5*D*log(lmb);
    end

    function [samples] = sampling(xx, yy)
        N = 750; %number of samples
        burn = 250; %number of iterations to burn out
        %initial point
        %so initial result correspond to the posteriror of 0.5
        ww0 = zeros(size(xx, 2), 1); %weights
        eps0 = 0; %epsilon
        log_lmb0 = 0; %log of lambda
        zz = [ww0; eps0; log_lmb0;];
        %in the book it is said that shrinkage has log complexity
        %in contrast to expansion which takes linear time
        %so I take big width for all variables, though our width for eps
        %should much smaller
        width = 1000;
        samples = slice_sample(N, burn, @target_fun, zz, width, true, xx, yy);
    end

    function [] = scatter_plot(epsilons, log_lmbs)
        figure;
        plot(epsilons, log_lmbs, 'r*');
        xlabel('epsilon');
        ylabel('epsilon');        
    end

    function [] = performance(wws, yy, xx)
        %D - dimensionality of data points
        %N - number of instances
        %S - number of samples
        %wws D x S
        %xx  N x D
        %yy  N x 1
        %repmat(yy, [1, S]) N x S
        %xx * wws  N x S
        S = size(wws, 2);
        sigmas = 1./(1 + exp(-repmat(yy, [1, S]) .* (xx*wws)));%N x S
        probs = mean(sigmas, 2);%assemble samples
        log_probs = log(probs); 
        accuracy = probs > 0.5;
        
        fprintf('%s accuracy = %s \n',type_str ,errorbar_str(accuracy));
        fprintf('%s log probability = %s \n',type_str, errorbar_str(log_probs));
    end
    
    samples  = sampling(x_train, y_train);
    weights  = samples(end - 2, :);
    epsilons = samples(end - 1, :);
    log_lmbs = samples(end, :);
    
    scatter_plot(epsilons, log_lmbs);
    performance(weights, y_test, x_test);
end

